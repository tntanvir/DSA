-- ANS: 01















-- ANS: 02
INSERT INTO BORROWING(STUDENTID,ISBN,BORROWDATE,DUEDATE,RETURNDATE)
VALUES(3,
(SELECT ISBN
FROM BOOK
WHERE MAX(AvailableCopies)),CURDATE(),'2010-10-20',NULL);


-- ANS: 03
UPDATE BOOK
SET AvailableCopies=AvailableCopies-1
WHERE ISBN ='9781234567890';


-- ANS: 04
SELECT *
FROM STUDENT
WHERE STUDENTID=(
	SELECT STUDENTID
	FROM BORROWING
	WHERE BORROWID=(

		SELECT MAX(BorrowID) AS BorrowID
		FROM BORROWING
		)
);


-- ANS : 05

		SELECT *
		FROM BORROWING AS BORORROW
			JOIN BORROWING AS B ON BORORROW.STUDENTID=B.STUDENTID
		WHERE BORORROW.ReturnDate>B.DUEDATE
        


-- ANS :06















-- ANS :07
-- UNION : দুটো টেবিল এর মাঝে common value
-- UNION ALL:  দুটো টেবিল এর মাঝে common & uncommon value শুধু duplicate value বাদে 

-- ANS: 08
USE DUMMYDB;

SELECT *
FROM EMPLOYEES
WHERE SALARY =(

SELECT DISTINCT SALARY
FROM EMPLOYEES
ORDER BY SALARY ASC
LIMIT 1,1
);

-- ANS:09
CREATE TABLE DEPARTMENTS(
	DEPARTMENT_ID VARCHAR(10) PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR (30) NOT NULL UNIQUE

);
CREATE TABLE EMPLOYEE(
	EMPLOYEE_ID VARCHAR(20) PRIMARY KEY,
	NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(30) NOT NULL UNIQUE,
    PHONE INT(11),
    ADDRESS VARCHAR(30),
    DEPARTMENT_ID VARCHAR(10),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID) ON DELETE SET NULL
);
CREATE TABLE JOB_HISTORY(
	EMPLOYEE_ID VARCHAR(20) ,
	JOB_START DATE NOT NULL,
    END_DATE DATE,
    DEPARTMENT_ID VARCHAR(10) NOT NULL,
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

-- ANS: 10

-- এই course এ সবচেয়ে বেশি কাজে লাগবে Tabile create , tabile read, tabile delete & tabile update | তাই এই বিষয় গুলো বেশি ভালো লাগছে 
